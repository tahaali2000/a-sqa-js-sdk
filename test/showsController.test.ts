/**
 * Spotify Web API with fixes and improvements from sonalluxLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ShowsController } from '../src';
import { testClient } from './testClient';
import { expectHeadersToMatch, makeApiCall } from './testHelper';

describe('ShowsController', () => {
  let controller : ShowsController;

  beforeAll(() => {
    controller = new ShowsController(testClient);
  });

  it('should Test get-a-show', async () => {
    const id = '38bS44xjbVVZ3No3ByF1dJ';

    const market = 'ES';

    const response = await makeApiCall(
      () => controller.getAShow(id, market)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-multiple-shows', async () => {
    const ids = '5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ';

    const market = 'ES';

    const response = await makeApiCall(
      () => controller.getMultipleShows(ids, market)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-a-shows-episodes', async () => {
    const id = '38bS44xjbVVZ3No3ByF1dJ';

    const market = 'ES';

    const limit = 20;

    const offset = 0;

    const response = await makeApiCall(
      () => controller.getAShowsEpisodes(id, market, limit, offset)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-users-saved-shows', async () => {
    const limit = 20;

    const offset = 0;

    const response = await makeApiCall(
      () => controller.getUsersSavedShows(limit, offset)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test save-shows-user', async () => {
    const ids = '5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ';

    const response = await makeApiCall(
      () => controller.saveShowsUser(ids, undefined)
    );

    expect(response.statusCode).toBe(200);
  });

  it('should Test remove-shows-user', async () => {
    const ids = '5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ';

    const market = 'ES';

    const response = await makeApiCall(
      () => controller.removeShowsUser(ids, market, undefined)
    );

    expect(response.statusCode).toBe(200);
  });

  it('should Test check-users-saved-shows', async () => {
    const ids = '5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ';

    const response = await makeApiCall(
      () => controller.checkUsersSavedShows(ids)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: boolean[] = [
      false,
      true
    ];

    expect(response.result).not.toBeNull();
    expect(response.result).toEqual(expected);
  });
});
