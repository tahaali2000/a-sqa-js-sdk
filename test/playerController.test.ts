/**
 * Spotify Web API with fixes and improvements from sonalluxLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { PlayerController } from '../src';
import { testClient } from './testClient';
import { expectHeadersToMatch, makeApiCall } from './testHelper';

describe('PlayerController', () => {
  let controller : PlayerController;

  beforeAll(() => {
    controller = new PlayerController(testClient);
  });

  it('should Test get-information-about-the-users-current-playback', async () => {
    const market = 'ES';

    const response = await makeApiCall(
      () => controller.getInformationAboutTheUsersCurrentPlayback(
        market,
        undefined
      )
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-information-about-the-users-current-playback1', async () => {
    const market = 'ES';

    const response = await makeApiCall(
      () => controller.getInformationAboutTheUsersCurrentPlayback(
        market,
        undefined
      )
    );

    expect(response.statusCode).toBe(204);
  });

  it('should Test transfer-a-users-playback', async () => {
    const response = await makeApiCall(
      () => controller.transferAUsersPlayback(undefined)
    );

    expect(response.statusCode).toBe(204);
  });

  it('should Test get-a-users-available-devices', async () => {
    const response = await makeApiCall(
      () => controller.getAUsersAvailableDevices()
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-the-users-currently-playing-track', async () => {
    const market = 'ES';

    const response = await makeApiCall(
      () => controller.getTheUsersCurrentlyPlayingTrack(market, undefined)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test start-a-users-playback', async () => {
    const deviceId = '0d1841b0976bae2a3a310dd74c0f3df354899bc8';

    const response = await makeApiCall(
      () => controller.startAUsersPlayback(deviceId, undefined)
    );

    expect(response.statusCode).toBe(204);
  });

  it('should Test pause-a-users-playback', async () => {
    const deviceId = '0d1841b0976bae2a3a310dd74c0f3df354899bc8';

    const response = await makeApiCall(
      () => controller.pauseAUsersPlayback(deviceId)
    );

    expect(response.statusCode).toBe(204);
  });

  it('should Test skip-users-playback-to-next-track', async () => {
    const deviceId = '0d1841b0976bae2a3a310dd74c0f3df354899bc8';

    const response = await makeApiCall(
      () => controller.skipUsersPlaybackToNextTrack(deviceId)
    );

    expect(response.statusCode).toBe(204);
  });

  it('should Test skip-users-playback-to-previous-track', async () => {
    const deviceId = '0d1841b0976bae2a3a310dd74c0f3df354899bc8';

    const response = await makeApiCall(
      () => controller.skipUsersPlaybackToPreviousTrack(deviceId)
    );

    expect(response.statusCode).toBe(204);
  });

  it('should Test seek-to-position-in-currently-playing-track', async () => {
    const positionMs = 25000;

    const deviceId = '0d1841b0976bae2a3a310dd74c0f3df354899bc8';

    const response = await makeApiCall(
      () => controller.seekToPositionInCurrentlyPlayingTrack(
        positionMs,
        deviceId
      )
    );

    expect(response.statusCode).toBe(204);
  });

  it('should Test set-repeat-mode-on-users-playback', async () => {
    const state = 'context';

    const deviceId = '0d1841b0976bae2a3a310dd74c0f3df354899bc8';

    const response = await makeApiCall(
      () => controller.setRepeatModeOnUsersPlayback(state, deviceId)
    );

    expect(response.statusCode).toBe(204);
  });

  it('should Test set-volume-for-users-playback', async () => {
    const volumePercent = 50;

    const deviceId = '0d1841b0976bae2a3a310dd74c0f3df354899bc8';

    const response = await makeApiCall(
      () => controller.setVolumeForUsersPlayback(volumePercent, deviceId)
    );

    expect(response.statusCode).toBe(204);
  });

  it('should Test toggle-shuffle-for-users-playback', async () => {
    const state = true;

    const deviceId = '0d1841b0976bae2a3a310dd74c0f3df354899bc8';

    const response = await makeApiCall(
      () => controller.toggleShuffleForUsersPlayback(state, deviceId)
    );

    expect(response.statusCode).toBe(204);
  });

  it('should Test get-recently-played', async () => {
    const limit = 20;

    const after = BigInt(1484811043508);

    const response = await makeApiCall(
      () => controller.getRecentlyPlayed(limit, after, undefined)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-queue', async () => {
    const response = await makeApiCall(
      () => controller.getQueue()
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test add-to-queue', async () => {
    const uri = 'spotify:track:4iV5W9uYEdYUVa79Axb7Rh';

    const deviceId = '0d1841b0976bae2a3a310dd74c0f3df354899bc8';

    const response = await makeApiCall(
      () => controller.addToQueue(uri, deviceId)
    );

    expect(response.statusCode).toBe(204);
  });
});
