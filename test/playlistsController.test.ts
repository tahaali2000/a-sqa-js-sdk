/**
 * Spotify Web API with fixes and improvements from sonalluxLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { PlaylistsController } from '../src';
import { testClient } from './testClient';
import { expectHeadersToMatch, makeApiCall } from './testHelper';

describe('PlaylistsController', () => {
  let controller : PlaylistsController;

  beforeAll(() => {
    controller = new PlaylistsController(testClient);
  });

  it('should Test get-playlist', async () => {
    const playlistId = '3cEYpjA9oz9GiPac4AsH4n';

    const market = 'ES';

    const fields = 'items(added_by.id,track(name,href,album(name,href)))';

    const response = await makeApiCall(
      () => controller.getPlaylist(playlistId, market, fields, undefined)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test change-playlist-details', async () => {
    const playlistId = '3cEYpjA9oz9GiPac4AsH4n';

    const response = await makeApiCall(
      () => controller.changePlaylistDetails(playlistId, undefined)
    );

    expect(response.statusCode).toBe(200);
  });

  it('should Test get-playlists-tracks', async () => {
    const playlistId = '3cEYpjA9oz9GiPac4AsH4n';

    const market = 'ES';

    const fields = 'items(added_by.id,track(name,href,album(name,href)))';

    const limit = 20;

    const offset = 0;

    const response = await makeApiCall(
      () => controller.getPlaylistsTracks(
        playlistId,
        market,
        fields,
        limit,
        offset,
        undefined
      )
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test add-tracks-to-playlist', async () => {
    const playlistId = '3cEYpjA9oz9GiPac4AsH4n';

    const position = 0;

    const uris = 'spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M';

    const response = await makeApiCall(
      () => controller.addTracksToPlaylist(
        playlistId,
        position,
        uris,
        undefined
      )
    );

    expect(response.statusCode).toBe(201);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test reorder-or-replace-playlists-tracks', async () => {
    const playlistId = '3cEYpjA9oz9GiPac4AsH4n';

    const response = await makeApiCall(
      () => controller.reorderOrReplacePlaylistsTracks(
        playlistId,
        undefined,
        undefined
      )
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test remove-tracks-playlist', async () => {
    const playlistId = '3cEYpjA9oz9GiPac4AsH4n';

    const response = await makeApiCall(
      () => controller.removeTracksPlaylist(playlistId, undefined)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-a-list-of-current-users-playlists', async () => {
    const limit = 20;

    const offset = 0;

    const response = await makeApiCall(
      () => controller.getAListOfCurrentUsersPlaylists(limit, offset)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-list-users-playlists', async () => {
    const userId = 'smedjan';

    const limit = 20;

    const offset = 0;

    const response = await makeApiCall(
      () => controller.getListUsersPlaylists(userId, limit, offset)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test create-playlist', async () => {
    const userId = 'smedjan';

    const response = await makeApiCall(
      () => controller.createPlaylist(userId, undefined)
    );

    expect(response.statusCode).toBe(201);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-featured-playlists', async () => {
    const locale = 'sv_SE';

    const limit = 20;

    const offset = 0;

    const response = await makeApiCall(
      () => controller.getFeaturedPlaylists(locale, limit, offset)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-a-categories-playlists', async () => {
    const categoryId = 'dinner';

    const limit = 20;

    const offset = 0;

    const response = await makeApiCall(
      () => controller.getACategoriesPlaylists(categoryId, limit, offset)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-playlist-cover', async () => {
    const playlistId = '3cEYpjA9oz9GiPac4AsH4n';

    const response = await makeApiCall(
      () => controller.getPlaylistCover(playlistId)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });
});
