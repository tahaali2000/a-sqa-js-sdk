/**
 * Spotify Web API with fixes and improvements from sonalluxLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { AudiobooksController } from '../src';
import { testClient } from './testClient';
import { expectHeadersToMatch, makeApiCall } from './testHelper';

describe('AudiobooksController', () => {
  let controller : AudiobooksController;

  beforeAll(() => {
    controller = new AudiobooksController(testClient);
  });

  it('should Test get-an-audiobook', async () => {
    const id = '7iHfbu1YPACw6oZPAFJtqe';

    const market = 'ES';

    const response = await makeApiCall(
      () => controller.getAnAudiobook(id, market)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-multiple-audiobooks', async () => {
    const ids = '18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe';

    const market = 'ES';

    const response = await makeApiCall(
      () => controller.getMultipleAudiobooks(ids, market)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-audiobook-chapters', async () => {
    const id = '7iHfbu1YPACw6oZPAFJtqe';

    const market = 'ES';

    const limit = 20;

    const offset = 0;

    const response = await makeApiCall(
      () => controller.getAudiobookChapters(id, market, limit, offset)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-users-saved-audiobooks', async () => {
    const limit = 20;

    const offset = 0;

    const response = await makeApiCall(
      () => controller.getUsersSavedAudiobooks(limit, offset)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test save-audiobooks-user', async () => {
    const ids = '18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe';

    const response = await makeApiCall(
      () => controller.saveAudiobooksUser(ids)
    );

    expect(response.statusCode).toBe(200);
  });

  it('should Test remove-audiobooks-user', async () => {
    const ids = '18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe';

    const response = await makeApiCall(
      () => controller.removeAudiobooksUser(ids)
    );

    expect(response.statusCode).toBe(200);
  });

  it('should Test check-users-saved-audiobooks', async () => {
    const ids = '18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ,7iHfbu1YPACw6oZPAFJtqe';

    const response = await makeApiCall(
      () => controller.checkUsersSavedAudiobooks(ids)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: boolean[] = [
      false,
      true
    ];

    expect(response.result).not.toBeNull();
    expect(response.result).toEqual(expected);
  });
});
