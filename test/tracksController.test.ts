/**
 * Spotify Web API with fixes and improvements from sonalluxLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { TracksController } from '../src';
import { testClient } from './testClient';
import { expectHeadersToMatch, makeApiCall } from './testHelper';

describe('TracksController', () => {
  let controller : TracksController;

  beforeAll(() => {
    controller = new TracksController(testClient);
  });

  it('should Test get-track', async () => {
    const id = '11dFghVXANMlKmJXsNCbNl';

    const market = 'ES';

    const response = await makeApiCall(
      () => controller.getTrack(id, market)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-several-tracks', async () => {
    const ids = '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B';

    const market = 'ES';

    const response = await makeApiCall(
      () => controller.getSeveralTracks(ids, market)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-users-saved-tracks', async () => {
    const market = 'ES';

    const limit = 20;

    const offset = 0;

    const response = await makeApiCall(
      () => controller.getUsersSavedTracks(market, limit, offset)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test save-tracks-user', async () => {
    const ids = '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B';

    const response = await makeApiCall(
      () => controller.saveTracksUser(ids, undefined)
    );

    expect(response.statusCode).toBe(200);
  });

  it('should Test remove-tracks-user', async () => {
    const ids = '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B';

    const response = await makeApiCall(
      () => controller.removeTracksUser(ids, undefined)
    );

    expect(response.statusCode).toBe(200);
  });

  it('should Test check-users-saved-tracks', async () => {
    const ids = '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B';

    const response = await makeApiCall(
      () => controller.checkUsersSavedTracks(ids)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: boolean[] = [
      false,
      true
    ];

    expect(response.result).not.toBeNull();
    expect(response.result).toEqual(expected);
  });

  it('should Test get-several-audio-features', async () => {
    const ids = '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B';

    const response = await makeApiCall(
      () => controller.getSeveralAudioFeatures(ids)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-audio-features', async () => {
    const id = '11dFghVXANMlKmJXsNCbNl';

    const response = await makeApiCall(
      () => controller.getAudioFeatures(id)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-audio-analysis', async () => {
    const id = '11dFghVXANMlKmJXsNCbNl';

    const response = await makeApiCall(
      () => controller.getAudioAnalysis(id)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-recommendations', async () => {
    const limit = 20;

    const market = 'ES';

    const seedArtists = '4NHQUGzhtTLFvgF5SZesLK';

    const seedGenres = 'classical,country';

    const seedTracks = '0c6xIDDpzE81m2q797ordA';

    const response = await makeApiCall(
      () => controller.getRecommendations(
        limit,
        market,
        seedArtists,
        seedGenres,
        seedTracks,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      )
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });
});
