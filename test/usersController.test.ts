/**
 * Spotify Web API with fixes and improvements from sonalluxLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  ItemType1Enum,
  ItemType2Enum,
  ItemType3Enum,
  UsersController,
} from '../src';
import { testClient } from './testClient';
import { expectHeadersToMatch, makeApiCall } from './testHelper';

describe('UsersController', () => {
  let controller : UsersController;

  beforeAll(() => {
    controller = new UsersController(testClient);
  });

  it('should Test get-current-users-profile', async () => {
    const response = await makeApiCall(
      () => controller.getCurrentUsersProfile()
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-users-profile', async () => {
    const userId = 'smedjan';

    const response = await makeApiCall(
      () => controller.getUsersProfile(userId)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test follow-playlist', async () => {
    const playlistId = '3cEYpjA9oz9GiPac4AsH4n';

    const response = await makeApiCall(
      () => controller.followPlaylist(playlistId, undefined)
    );

    expect(response.statusCode).toBe(200);
  });

  it('should Test unfollow-playlist', async () => {
    const playlistId = '3cEYpjA9oz9GiPac4AsH4n';

    const response = await makeApiCall(
      () => controller.unfollowPlaylist(playlistId)
    );

    expect(response.statusCode).toBe(200);
  });

  it('should Test get-followed', async () => {
    const type = ItemType1Enum.Artist;

    const after = '0I2XqVXqHScXjHhk6AYYRe';

    const limit = 20;

    const response = await makeApiCall(
      () => controller.getFollowed(type, after, limit)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test follow-artists-users', async () => {
    const type = ItemType2Enum.Artist;

    const ids = '2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6';

    const response = await makeApiCall(
      () => controller.followArtistsUsers(type, ids, undefined)
    );

    expect(response.statusCode).toBe(204);
  });

  it('should Test unfollow-artists-users', async () => {
    const type = ItemType3Enum.Artist;

    const ids = '2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6';

    const response = await makeApiCall(
      () => controller.unfollowArtistsUsers(type, ids, undefined)
    );

    expect(response.statusCode).toBe(200);
  });

  it('should Test check-current-user-follows', async () => {
    const type = ItemType3Enum.Artist;

    const ids = '2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6';

    const response = await makeApiCall(
      () => controller.checkCurrentUserFollows(type, ids)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: boolean[] = [
      false,
      true
    ];

    expect(response.result).not.toBeNull();
    expect(response.result).toEqual(expected);
  });

  it('should Test check-if-user-follows-playlist', async () => {
    const playlistId = '3cEYpjA9oz9GiPac4AsH4n';

    const ids = 'jmperezperez,thelinmichael,wizzler';

    const response = await makeApiCall(
      () => controller.checkIfUserFollowsPlaylist(playlistId, ids)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: boolean[] = [
      false,
      true
    ];

    expect(response.result).not.toBeNull();
    expect(response.result).toEqual(expected);
  });

  it('should Test get-users-top-artists', async () => {
    const timeRange = 'medium_term';

    const limit = 20;

    const offset = 0;

    const response = await makeApiCall(
      () => controller.getUsersTopArtists(timeRange, limit, offset)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-users-top-tracks', async () => {
    const timeRange = 'medium_term';

    const limit = 20;

    const offset = 0;

    const response = await makeApiCall(
      () => controller.getUsersTopTracks(timeRange, limit, offset)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });
});
