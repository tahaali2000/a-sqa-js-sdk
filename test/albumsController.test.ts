/**
 * Spotify Web API with fixes and improvements from sonalluxLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { AlbumsController } from '../src';
import { testClient } from './testClient';
import { expectHeadersToMatch, makeApiCall } from './testHelper';

describe('AlbumsController', () => {
  let controller : AlbumsController;

  beforeAll(() => {
    controller = new AlbumsController(testClient);
  });

  it('should Test get-an-album', async () => {
    const id = '4aawyAB9vmqN3uQ7FjRGTy';

    const market = 'ES';

    const response = await makeApiCall(
      () => controller.getAnAlbum(id, market)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-multiple-albums', async () => {
    const ids = '382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc';

    const market = 'ES';

    const response = await makeApiCall(
      () => controller.getMultipleAlbums(ids, market)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-an-albums-tracks', async () => {
    const id = '4aawyAB9vmqN3uQ7FjRGTy';

    const market = 'ES';

    const limit = 20;

    const offset = 0;

    const response = await makeApiCall(
      () => controller.getAnAlbumsTracks(id, market, limit, offset)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test get-users-saved-albums', async () => {
    const limit = 20;

    const offset = 0;

    const market = 'ES';

    const response = await makeApiCall(
      () => controller.getUsersSavedAlbums(limit, offset, market)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test save-albums-user', async () => {
    const ids = '382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc';

    const response = await makeApiCall(
      () => controller.saveAlbumsUser(ids, undefined)
    );

    expect(response.statusCode).toBe(200);
  });

  it('should Test remove-albums-user', async () => {
    const ids = '382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc';

    const response = await makeApiCall(
      () => controller.removeAlbumsUser(ids, undefined)
    );

    expect(response.statusCode).toBe(200);
  });

  it('should Test check-users-saved-albums', async () => {
    const ids = '382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc';

    const response = await makeApiCall(
      () => controller.checkUsersSavedAlbums(ids)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: boolean[] = [
      false,
      true
    ];

    expect(response.result).not.toBeNull();
    expect(response.result).toEqual(expected);
  });

  it('should Test get-new-releases', async () => {
    const limit = 20;

    const offset = 0;

    const response = await makeApiCall(
      () => controller.getNewReleases(limit, offset)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });
});
