/**
 * Spotify Web API with fixes and improvements from sonalluxLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  nullable,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  ExternalUrlObject,
  externalUrlObjectSchema,
} from './externalUrlObject';
import { FollowersObject, followersObjectSchema } from './followersObject';
import { ImageObject, imageObjectSchema } from './imageObject';
import {
  PagingPlaylistTrackObject,
  pagingPlaylistTrackObjectSchema,
} from './pagingPlaylistTrackObject';
import {
  PlaylistOwnerObject,
  playlistOwnerObjectSchema,
} from './playlistOwnerObject';

export interface PlaylistObject {
  /** `true` if the owner allows other users to modify the playlist. */
  collaborative?: boolean;
  /** The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`. */
  description?: string | null;
  /** Known external URLs for this playlist. */
  externalUrls?: ExternalUrlObject;
  /** Information about the followers of the playlist. */
  followers?: FollowersObject;
  /** A link to the Web API endpoint providing full details of the playlist. */
  href?: string;
  /** The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. */
  id?: string;
  /** Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._ */
  images?: ImageObject[];
  /** The name of the playlist. */
  name?: string;
  /** The user who owns the playlist */
  owner?: PlaylistOwnerObject;
  /** The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists) */
  mPublic?: boolean;
  /** The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version */
  snapshotId?: string;
  /** The tracks of the playlist. */
  tracks?: PagingPlaylistTrackObject;
  /** The object type: "playlist" */
  type?: string;
  /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. */
  uri?: string;
}

export const playlistObjectSchema: Schema<PlaylistObject> = object({
  collaborative: ['collaborative', optional(boolean())],
  description: ['description', optional(nullable(string()))],
  externalUrls: [
    'external_urls',
    optional(lazy(() => externalUrlObjectSchema)),
  ],
  followers: ['followers', optional(lazy(() => followersObjectSchema))],
  href: ['href', optional(string())],
  id: ['id', optional(string())],
  images: ['images', optional(array(lazy(() => imageObjectSchema)))],
  name: ['name', optional(string())],
  owner: ['owner', optional(lazy(() => playlistOwnerObjectSchema))],
  mPublic: ['public', optional(boolean())],
  snapshotId: ['snapshot_id', optional(string())],
  tracks: ['tracks', optional(lazy(() => pagingPlaylistTrackObjectSchema))],
  type: ['type', optional(string())],
  uri: ['uri', optional(string())],
});
