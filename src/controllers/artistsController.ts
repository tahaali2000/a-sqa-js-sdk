/**
 * Spotify Web API with fixes and improvements from sonalluxLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ArtistObject, artistObjectSchema } from '../models/artistObject';
import { ManyArtists, manyArtistsSchema } from '../models/manyArtists';
import { ManyTracks, manyTracksSchema } from '../models/manyTracks';
import {
  PagingArtistDiscographyAlbumObject,
  pagingArtistDiscographyAlbumObjectSchema,
} from '../models/pagingArtistDiscographyAlbumObject';
import { number, optional, string } from '../schema';
import { BaseController } from './baseController';
import { ForbiddenError } from '../errors/forbiddenError';
import { TooManyRequestsError } from '../errors/tooManyRequestsError';
import { UnauthorizedError } from '../errors/unauthorizedError';

export class ArtistsController extends BaseController {
  /**
   * Get Spotify catalog information for a single artist identified by their unique Spotify ID.
   *
   *
   * @param id
   * @return Response from the API call


   */
  async getAnArtist(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ArtistObject>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/artists/${mapped.id}`;
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(artistObjectSchema, requestOptions);
  }

  /**
   * Get Spotify catalog information for several artists based on their Spotify IDs.
   *
   *
   * @param ids
   * @return Response from the API call


   */
  async getMultipleArtists(
    ids: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ManyArtists>> {
    const req = this.createRequest('GET', '/artists');
    const mapped = req.prepareArgs({ ids: [ids, string()] });
    req.query('ids', mapped.ids);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(manyArtistsSchema, requestOptions);
  }

  /**
   * Get Spotify catalog information about an artist's albums.
   *
   *
   * @param id
   * @param includeGroups
   * @param market
   * @param limit          Example: 20
   * @param offset         Example: 0
   * @return Response from the API call


   */
  async getAnArtistsAlbums(
    id: string,
    includeGroups?: string,
    market?: string,
    limit?: number,
    offset?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PagingArtistDiscographyAlbumObject>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      id: [id, string()],
      includeGroups: [includeGroups, optional(string())],
      market: [market, optional(string())],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
    });
    req.query('include_groups', mapped.includeGroups);
    req.query('market', mapped.market);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.appendTemplatePath`/artists/${mapped.id}/albums`;
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(
      pagingArtistDiscographyAlbumObjectSchema,
      requestOptions
    );
  }

  /**
   * Get Spotify catalog information about an artist's top tracks by country.
   *
   *
   * @param id
   * @param market
   * @return Response from the API call


   */
  async getAnArtistsTopTracks(
    id: string,
    market?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ManyTracks>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      id: [id, string()],
      market: [market, optional(string())],
    });
    req.query('market', mapped.market);
    req.appendTemplatePath`/artists/${mapped.id}/top-tracks`;
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(manyTracksSchema, requestOptions);
  }

  /**
   * Get Spotify catalog information about artists similar to a given artist. Similarity is based on
   * analysis of the Spotify community's listening history.
   *
   *
   * @param id
   * @return Response from the API call


   */
  async getAnArtistsRelatedArtists(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ManyArtists>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/artists/${mapped.id}/related-artists`;
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(manyArtistsSchema, requestOptions);
  }
}
