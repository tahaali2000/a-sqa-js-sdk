/**
 * Spotify Web API with fixes and improvements from sonalluxLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  IncludeExternalEnum,
  includeExternalEnumSchema,
} from '../models/includeExternalEnum';
import { ItemTypeEnum, itemTypeEnumSchema } from '../models/itemTypeEnum';
import { SearchItems, searchItemsSchema } from '../models/searchItems';
import { array, number, optional, string } from '../schema';
import { BaseController } from './baseController';
import { ForbiddenError } from '../errors/forbiddenError';
import { TooManyRequestsError } from '../errors/tooManyRequestsError';
import { UnauthorizedError } from '../errors/unauthorizedError';

export class SearchController extends BaseController {
  /**
   * Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or
   * audiobooks
   * that match a keyword string. Audiobooks are only available within the US, UK, Canada, Ireland, New
   * Zealand and Australia markets.
   *
   *
   * @param q
   * @param type
   * @param market
   * @param limit            Example: 20
   * @param offset           Example: 0
   * @param includeExternal
   * @return Response from the API call


   */
  async search(
    q: string,
    type: ItemTypeEnum[],
    market?: string,
    limit?: number,
    offset?: number,
    includeExternal?: IncludeExternalEnum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SearchItems>> {
    const req = this.createRequest('GET', '/search');
    const mapped = req.prepareArgs({
      q: [q, string()],
      type: [type, array(itemTypeEnumSchema)],
      market: [market, optional(string())],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
      includeExternal: [includeExternal, optional(includeExternalEnumSchema)],
    });
    req.query('q', mapped.q);
    req.query('type', mapped.type);
    req.query('market', mapped.market);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.query('include_external', mapped.includeExternal);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(searchItemsSchema, requestOptions);
  }
}
