/**
 * Spotify Web API with fixes and improvements from sonalluxLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  AudiobookObject,
  audiobookObjectSchema,
} from '../models/audiobookObject';
import { ManyAudiobooks, manyAudiobooksSchema } from '../models/manyAudiobooks';
import {
  PagingSavedAudiobookObject,
  pagingSavedAudiobookObjectSchema,
} from '../models/pagingSavedAudiobookObject';
import {
  PagingSimplifiedChapterObject,
  pagingSimplifiedChapterObjectSchema,
} from '../models/pagingSimplifiedChapterObject';
import { array, boolean, number, optional, string } from '../schema';
import { BaseController } from './baseController';
import { BadRequestError } from '../errors/badRequestError';
import { ForbiddenError } from '../errors/forbiddenError';
import { NotFoundError } from '../errors/notFoundError';
import { TooManyRequestsError } from '../errors/tooManyRequestsError';
import { UnauthorizedError } from '../errors/unauthorizedError';

export class AudiobooksController extends BaseController {
  /**
   * Get Spotify catalog information for a single audiobook. Audiobooks are only available within the US,
   * UK, Canada, Ireland, New Zealand and Australia markets.
   *
   *
   * @param id
   * @param market
   * @return Response from the API call


   */
  async getAnAudiobook(
    id: string,
    market?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AudiobookObject>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      id: [id, string()],
      market: [market, optional(string())],
    });
    req.query('market', mapped.market);
    req.appendTemplatePath`/audiobooks/${mapped.id}`;
    req.throwOn(
      400,
      BadRequestError,
      'The request contains malformed data in path, query parameters, or body.\n'
    );
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      404,
      NotFoundError,
      'The requested resource cannot be found.\n'
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(audiobookObjectSchema, requestOptions);
  }

  /**
   * Get Spotify catalog information for several audiobooks identified by their Spotify IDs. Audiobooks
   * are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets.
   *
   *
   * @param ids
   * @param market
   * @return Response from the API call


   */
  async getMultipleAudiobooks(
    ids: string,
    market?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ManyAudiobooks>> {
    const req = this.createRequest('GET', '/audiobooks');
    const mapped = req.prepareArgs({
      ids: [ids, string()],
      market: [market, optional(string())],
    });
    req.query('ids', mapped.ids);
    req.query('market', mapped.market);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(manyAudiobooksSchema, requestOptions);
  }

  /**
   * Get Spotify catalog information about an audiobook's chapters. Audiobooks are only available within
   * the US, UK, Canada, Ireland, New Zealand and Australia markets.
   *
   *
   * @param id
   * @param market
   * @param limit  Example: 20
   * @param offset Example: 0
   * @return Response from the API call


   */
  async getAudiobookChapters(
    id: string,
    market?: string,
    limit?: number,
    offset?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PagingSimplifiedChapterObject>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      id: [id, string()],
      market: [market, optional(string())],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
    });
    req.query('market', mapped.market);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.appendTemplatePath`/audiobooks/${mapped.id}/chapters`;
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(pagingSimplifiedChapterObjectSchema, requestOptions);
  }

  /**
   * Get a list of the audiobooks saved in the current Spotify user's 'Your Music' library.
   *
   *
   * @param limit  Example: 20
   * @param offset Example: 0
   * @return Response from the API call


   */
  async getUsersSavedAudiobooks(
    limit?: number,
    offset?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PagingSavedAudiobookObject>> {
    const req = this.createRequest('GET', '/me/audiobooks');
    const mapped = req.prepareArgs({
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
    });
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(pagingSavedAudiobookObjectSchema, requestOptions);
  }

  /**
   * Save one or more audiobooks to the current Spotify user's library.
   *
   *
   * @param ids
   * @return Response from the API call


   */
  async saveAudiobooksUser(
    ids: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT', '/me/audiobooks');
    const mapped = req.prepareArgs({ ids: [ids, string()] });
    req.query('ids', mapped.ids);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.call(requestOptions);
  }

  /**
   * Remove one or more audiobooks from the Spotify user's library.
   *
   *
   * @param ids
   * @return Response from the API call


   */
  async removeAudiobooksUser(
    ids: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE', '/me/audiobooks');
    const mapped = req.prepareArgs({ ids: [ids, string()] });
    req.query('ids', mapped.ids);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.call(requestOptions);
  }

  /**
   * Check if one or more audiobooks are already saved in the current Spotify user's library.
   *
   *
   * @param ids
   * @return Response from the API call


   */
  async checkUsersSavedAudiobooks(
    ids: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean[]>> {
    const req = this.createRequest('GET', '/me/audiobooks/contains');
    const mapped = req.prepareArgs({ ids: [ids, string()] });
    req.query('ids', mapped.ids);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(array(boolean()), requestOptions);
  }
}
