/**
 * Spotify Web API with fixes and improvements from sonalluxLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CursorPagedArtists,
  cursorPagedArtistsSchema,
} from '../models/cursorPagedArtists';
import { ItemType1Enum, itemType1EnumSchema } from '../models/itemType1Enum';
import { ItemType2Enum, itemType2EnumSchema } from '../models/itemType2Enum';
import { ItemType3Enum, itemType3EnumSchema } from '../models/itemType3Enum';
import {
  MeFollowingRequest,
  meFollowingRequestSchema,
} from '../models/meFollowingRequest';
import {
  MeFollowingRequest1,
  meFollowingRequest1Schema,
} from '../models/meFollowingRequest1';
import {
  PagingArtistObject,
  pagingArtistObjectSchema,
} from '../models/pagingArtistObject';
import {
  PagingTrackObject,
  pagingTrackObjectSchema,
} from '../models/pagingTrackObject';
import {
  PlaylistsFollowersRequest,
  playlistsFollowersRequestSchema,
} from '../models/playlistsFollowersRequest';
import {
  PrivateUserObject,
  privateUserObjectSchema,
} from '../models/privateUserObject';
import {
  PublicUserObject,
  publicUserObjectSchema,
} from '../models/publicUserObject';
import { array, boolean, number, optional, string } from '../schema';
import { BaseController } from './baseController';
import { ForbiddenError } from '../errors/forbiddenError';
import { TooManyRequestsError } from '../errors/tooManyRequestsError';
import { UnauthorizedError } from '../errors/unauthorizedError';

export class UsersController extends BaseController {
  /**
   * Get detailed profile information about the current user (including the
   * current user's username).
   *
   *
   * @return Response from the API call


   */
  async getCurrentUsersProfile(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PrivateUserObject>> {
    const req = this.createRequest('GET', '/me');
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(privateUserObjectSchema, requestOptions);
  }

  /**
   * Get public profile information about a Spotify user.
   *
   *
   * @param userId
   * @return Response from the API call


   */
  async getUsersProfile(
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PublicUserObject>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userId: [userId, string()] });
    req.appendTemplatePath`/users/${mapped.userId}`;
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(publicUserObjectSchema, requestOptions);
  }

  /**
   * Add the current user as a follower of a playlist.
   *
   *
   * @param playlistId
   * @param body
   * @return Response from the API call


   */
  async followPlaylist(
    playlistId: string,
    body?: PlaylistsFollowersRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      playlistId: [playlistId, string()],
      body: [body, optional(playlistsFollowersRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/playlists/${mapped.playlistId}/followers`;
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.call(requestOptions);
  }

  /**
   * Remove the current user as a follower of a playlist.
   *
   *
   * @param playlistId
   * @return Response from the API call


   */
  async unfollowPlaylist(
    playlistId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ playlistId: [playlistId, string()] });
    req.appendTemplatePath`/playlists/${mapped.playlistId}/followers`;
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.call(requestOptions);
  }

  /**
   * Get the current user's followed artists.
   *
   *
   * @param type
   * @param after
   * @param limit Example: 20
   * @return Response from the API call


   */
  async getFollowed(
    type: ItemType1Enum,
    after?: string,
    limit?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CursorPagedArtists>> {
    const req = this.createRequest('GET', '/me/following');
    const mapped = req.prepareArgs({
      type: [type, itemType1EnumSchema],
      after: [after, optional(string())],
      limit: [limit, optional(number())],
    });
    req.query('type', mapped.type);
    req.query('after', mapped.after);
    req.query('limit', mapped.limit);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(cursorPagedArtistsSchema, requestOptions);
  }

  /**
   * Add the current user as a follower of one or more artists or other Spotify users.
   *
   *
   * @param type
   * @param ids
   * @param body
   * @return Response from the API call


   */
  async followArtistsUsers(
    type: ItemType2Enum,
    ids: string,
    body?: MeFollowingRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT', '/me/following');
    const mapped = req.prepareArgs({
      type: [type, itemType2EnumSchema],
      ids: [ids, string()],
      body: [body, optional(meFollowingRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.query('type', mapped.type);
    req.query('ids', mapped.ids);
    req.json(mapped.body);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.call(requestOptions);
  }

  /**
   * Remove the current user as a follower of one or more artists or other Spotify users.
   *
   *
   * @param type
   * @param ids
   * @param body
   * @return Response from the API call


   */
  async unfollowArtistsUsers(
    type: ItemType3Enum,
    ids: string,
    body?: MeFollowingRequest1,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE', '/me/following');
    const mapped = req.prepareArgs({
      type: [type, itemType3EnumSchema],
      ids: [ids, string()],
      body: [body, optional(meFollowingRequest1Schema)],
    });
    req.header('Content-Type', 'application/json');
    req.query('type', mapped.type);
    req.query('ids', mapped.ids);
    req.json(mapped.body);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.call(requestOptions);
  }

  /**
   * Check to see if the current user is following one or more artists or other Spotify users.
   *
   *
   * @param type
   * @param ids
   * @return Response from the API call


   */
  async checkCurrentUserFollows(
    type: ItemType3Enum,
    ids: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean[]>> {
    const req = this.createRequest('GET', '/me/following/contains');
    const mapped = req.prepareArgs({
      type: [type, itemType3EnumSchema],
      ids: [ids, string()],
    });
    req.query('type', mapped.type);
    req.query('ids', mapped.ids);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(array(boolean()), requestOptions);
  }

  /**
   * Check to see if one or more Spotify users are following a specified playlist.
   *
   *
   * @param playlistId
   * @param ids
   * @return Response from the API call


   */
  async checkIfUserFollowsPlaylist(
    playlistId: string,
    ids: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      playlistId: [playlistId, string()],
      ids: [ids, string()],
    });
    req.query('ids', mapped.ids);
    req.appendTemplatePath`/playlists/${mapped.playlistId}/followers/contains`;
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(array(boolean()), requestOptions);
  }

  /**
   * Get the current user's top artists based on calculated affinity.
   *
   *
   * @param timeRange  Example: medium_term
   * @param limit      Example: 20
   * @param offset     Example: 0
   * @return Response from the API call


   */
  async getUsersTopArtists(
    timeRange?: string,
    limit?: number,
    offset?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PagingArtistObject>> {
    const req = this.createRequest('GET', '/me/top/artists');
    const mapped = req.prepareArgs({
      timeRange: [timeRange, optional(string())],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
    });
    req.query('time_range', mapped.timeRange);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(pagingArtistObjectSchema, requestOptions);
  }

  /**
   * Get the current user's top tracks based on calculated affinity.
   *
   *
   * @param timeRange  Example: medium_term
   * @param limit      Example: 20
   * @param offset     Example: 0
   * @return Response from the API call


   */
  async getUsersTopTracks(
    timeRange?: string,
    limit?: number,
    offset?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PagingTrackObject>> {
    const req = this.createRequest('GET', '/me/top/tracks');
    const mapped = req.prepareArgs({
      timeRange: [timeRange, optional(string())],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
    });
    req.query('time_range', mapped.timeRange);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(pagingTrackObjectSchema, requestOptions);
  }
}
