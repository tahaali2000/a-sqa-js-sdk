/**
 * Spotify Web API with fixes and improvements from sonalluxLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { AlbumObject, albumObjectSchema } from '../models/albumObject';
import { ManyAlbums, manyAlbumsSchema } from '../models/manyAlbums';
import {
  MeAlbumsRequest,
  meAlbumsRequestSchema,
} from '../models/meAlbumsRequest';
import { PagedAlbums, pagedAlbumsSchema } from '../models/pagedAlbums';
import {
  PagingSavedAlbumObject,
  pagingSavedAlbumObjectSchema,
} from '../models/pagingSavedAlbumObject';
import {
  PagingSimplifiedTrackObject,
  pagingSimplifiedTrackObjectSchema,
} from '../models/pagingSimplifiedTrackObject';
import { array, boolean, number, optional, string } from '../schema';
import { BaseController } from './baseController';
import { ForbiddenError } from '../errors/forbiddenError';
import { TooManyRequestsError } from '../errors/tooManyRequestsError';
import { UnauthorizedError } from '../errors/unauthorizedError';

export class AlbumsController extends BaseController {
  /**
   * Get Spotify catalog information for a single album.
   *
   *
   * @param id
   * @param market
   * @return Response from the API call


   */
  async getAnAlbum(
    id: string,
    market?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AlbumObject>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      id: [id, string()],
      market: [market, optional(string())],
    });
    req.query('market', mapped.market);
    req.appendTemplatePath`/albums/${mapped.id}`;
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(albumObjectSchema, requestOptions);
  }

  /**
   * Get Spotify catalog information for multiple albums identified by their Spotify IDs.
   *
   *
   * @param ids
   * @param market
   * @return Response from the API call


   */
  async getMultipleAlbums(
    ids: string,
    market?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ManyAlbums>> {
    const req = this.createRequest('GET', '/albums');
    const mapped = req.prepareArgs({
      ids: [ids, string()],
      market: [market, optional(string())],
    });
    req.query('ids', mapped.ids);
    req.query('market', mapped.market);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(manyAlbumsSchema, requestOptions);
  }

  /**
   * Get Spotify catalog information about an album’s tracks.
   * Optional parameters can be used to limit the number of tracks returned.
   *
   *
   * @param id
   * @param market
   * @param limit  Example: 20
   * @param offset Example: 0
   * @return Response from the API call


   */
  async getAnAlbumsTracks(
    id: string,
    market?: string,
    limit?: number,
    offset?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PagingSimplifiedTrackObject>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      id: [id, string()],
      market: [market, optional(string())],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
    });
    req.query('market', mapped.market);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.appendTemplatePath`/albums/${mapped.id}/tracks`;
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(pagingSimplifiedTrackObjectSchema, requestOptions);
  }

  /**
   * Get a list of the albums saved in the current Spotify user's 'Your Music' library.
   *
   *
   * @param limit  Example: 20
   * @param offset Example: 0
   * @param market
   * @return Response from the API call


   */
  async getUsersSavedAlbums(
    limit?: number,
    offset?: number,
    market?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PagingSavedAlbumObject>> {
    const req = this.createRequest('GET', '/me/albums');
    const mapped = req.prepareArgs({
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
      market: [market, optional(string())],
    });
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.query('market', mapped.market);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(pagingSavedAlbumObjectSchema, requestOptions);
  }

  /**
   * Save one or more albums to the current user's 'Your Music' library.
   *
   *
   * @param ids
   * @param body
   * @return Response from the API call


   */
  async saveAlbumsUser(
    ids: string,
    body?: MeAlbumsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT', '/me/albums');
    const mapped = req.prepareArgs({
      ids: [ids, string()],
      body: [body, optional(meAlbumsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.query('ids', mapped.ids);
    req.json(mapped.body);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.call(requestOptions);
  }

  /**
   * Remove one or more albums from the current user's 'Your Music' library.
   *
   *
   * @param ids
   * @param body
   * @return Response from the API call


   */
  async removeAlbumsUser(
    ids: string,
    body?: MeAlbumsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE', '/me/albums');
    const mapped = req.prepareArgs({
      ids: [ids, string()],
      body: [body, optional(meAlbumsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.query('ids', mapped.ids);
    req.json(mapped.body);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.call(requestOptions);
  }

  /**
   * Check if one or more albums is already saved in the current Spotify user's 'Your Music' library.
   *
   *
   * @param ids
   * @return Response from the API call


   */
  async checkUsersSavedAlbums(
    ids: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean[]>> {
    const req = this.createRequest('GET', '/me/albums/contains');
    const mapped = req.prepareArgs({ ids: [ids, string()] });
    req.query('ids', mapped.ids);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(array(boolean()), requestOptions);
  }

  /**
   * Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s
   * “Browse” tab).
   *
   *
   * @param limit  Example: 20
   * @param offset Example: 0
   * @return Response from the API call


   */
  async getNewReleases(
    limit?: number,
    offset?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PagedAlbums>> {
    const req = this.createRequest('GET', '/browse/new-releases');
    const mapped = req.prepareArgs({
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
    });
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(pagedAlbumsSchema, requestOptions);
  }
}
