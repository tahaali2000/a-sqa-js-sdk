/**
 * Spotify Web API with fixes and improvements from sonalluxLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ManySimplifiedShows,
  manySimplifiedShowsSchema,
} from '../models/manySimplifiedShows';
import { MeShowsRequest, meShowsRequestSchema } from '../models/meShowsRequest';
import {
  PagingSavedShowObject,
  pagingSavedShowObjectSchema,
} from '../models/pagingSavedShowObject';
import {
  PagingSimplifiedEpisodeObject,
  pagingSimplifiedEpisodeObjectSchema,
} from '../models/pagingSimplifiedEpisodeObject';
import { ShowObject, showObjectSchema } from '../models/showObject';
import { array, boolean, number, optional, string } from '../schema';
import { BaseController } from './baseController';
import { ForbiddenError } from '../errors/forbiddenError';
import { TooManyRequestsError } from '../errors/tooManyRequestsError';
import { UnauthorizedError } from '../errors/unauthorizedError';

export class ShowsController extends BaseController {
  /**
   * Get Spotify catalog information for a single show identified by its
   * unique Spotify ID.
   *
   *
   * @param id
   * @param market
   * @return Response from the API call


   */
  async getAShow(
    id: string,
    market?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ShowObject>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      id: [id, string()],
      market: [market, optional(string())],
    });
    req.query('market', mapped.market);
    req.appendTemplatePath`/shows/${mapped.id}`;
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(showObjectSchema, requestOptions);
  }

  /**
   * Get Spotify catalog information for several shows based on their Spotify IDs.
   *
   *
   * @param ids
   * @param market
   * @return Response from the API call


   */
  async getMultipleShows(
    ids: string,
    market?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ManySimplifiedShows>> {
    const req = this.createRequest('GET', '/shows');
    const mapped = req.prepareArgs({
      ids: [ids, string()],
      market: [market, optional(string())],
    });
    req.query('ids', mapped.ids);
    req.query('market', mapped.market);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(manySimplifiedShowsSchema, requestOptions);
  }

  /**
   * Get Spotify catalog information about an showâ€™s episodes. Optional parameters can be used to limit
   * the number of episodes returned.
   *
   *
   * @param id
   * @param market
   * @param limit  Example: 20
   * @param offset Example: 0
   * @return Response from the API call


   */
  async getAShowsEpisodes(
    id: string,
    market?: string,
    limit?: number,
    offset?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PagingSimplifiedEpisodeObject>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      id: [id, string()],
      market: [market, optional(string())],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
    });
    req.query('market', mapped.market);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.appendTemplatePath`/shows/${mapped.id}/episodes`;
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(pagingSimplifiedEpisodeObjectSchema, requestOptions);
  }

  /**
   * Get a list of shows saved in the current Spotify user's library. Optional parameters can be used to
   * limit the number of shows returned.
   *
   *
   * @param limit  Example: 20
   * @param offset Example: 0
   * @return Response from the API call


   */
  async getUsersSavedShows(
    limit?: number,
    offset?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PagingSavedShowObject>> {
    const req = this.createRequest('GET', '/me/shows');
    const mapped = req.prepareArgs({
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
    });
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(pagingSavedShowObjectSchema, requestOptions);
  }

  /**
   * Save one or more shows to current Spotify user's library.
   *
   *
   * @param ids
   * @param body
   * @return Response from the API call


   */
  async saveShowsUser(
    ids: string,
    body?: MeShowsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT', '/me/shows');
    const mapped = req.prepareArgs({
      ids: [ids, string()],
      body: [body, optional(meShowsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.query('ids', mapped.ids);
    req.json(mapped.body);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.call(requestOptions);
  }

  /**
   * Delete one or more shows from current Spotify user's library.
   *
   *
   * @param ids
   * @param market
   * @param body
   * @return Response from the API call


   */
  async removeShowsUser(
    ids: string,
    market?: string,
    body?: MeShowsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE', '/me/shows');
    const mapped = req.prepareArgs({
      ids: [ids, string()],
      market: [market, optional(string())],
      body: [body, optional(meShowsRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.query('ids', mapped.ids);
    req.query('market', mapped.market);
    req.json(mapped.body);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.call(requestOptions);
  }

  /**
   * Check if one or more shows is already saved in the current Spotify user's library.
   *
   *
   * @param ids
   * @return Response from the API call


   */
  async checkUsersSavedShows(
    ids: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean[]>> {
    const req = this.createRequest('GET', '/me/shows/contains');
    const mapped = req.prepareArgs({ ids: [ids, string()] });
    req.query('ids', mapped.ids);
    req.throwOn(
      401,
      UnauthorizedError,
      'Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n'
    );
    req.throwOn(
      403,
      ForbiddenError,
      "Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n"
    );
    req.throwOn(
      429,
      TooManyRequestsError,
      'The app has exceeded its rate limits.\n'
    );
    req.authenticate([{ oauth20: true }]);
    return req.callAsJson(array(boolean()), requestOptions);
  }
}
